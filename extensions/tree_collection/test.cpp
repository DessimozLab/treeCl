#include <string>
#include <memory>
#include <utility>
#include "src/MinSqTree.h"
#include "src/ProblemParser.h"
#include <iostream>
using namespace std;

string dv("5\n"
        "10 10 1\n"
        "0.0 1.5395979767 1.95132944537 2.37777489273 2.37777489273 2.37777489273 2.77243301593 3.17200352149 3.17200352149 3.305087875\n"
        "1.5395979767 0.0 1.98632419386 2.85769198939 2.55475556825 2.18371870521 2.62192134139 2.09977892775 2.09977892775 2.18371870521\n"
        "1.95132944537 1.98632419386 0.0 2.27580041554 1.95132944537 2.18371870521 2.37777489273 2.09977892775 2.09977892775 2.18371870521\n"
        "2.37777489273 2.85769198939 2.27580041554 0.0 1.43428538834 1.49606229498 1.65805758041 1.85347285768 1.85347285768 1.73694104759\n"
        "2.37777489273 2.55475556825 1.95132944537 1.43428538834 0.0 0.970372914824 1.18957431881 1.58522499275 1.58522499275 1.47502046025\n"
        "2.37777489273 2.18371870521 2.18371870521 1.49606229498 0.970372914824 0.0 0.911089803885 1.793421274 1.793421274 1.68363113002\n"
        "2.77243301593 2.62192134139 2.37777489273 1.65805758041 1.18957431881 0.911089803885 0.0 2.0226574939 2.0226574939 1.88498486777\n"
        "3.17200352149 2.09977892775 2.09977892775 1.85347285768 1.58522499275 1.793421274 2.0226574939 0.0 1e-06 0.723907192458\n"
        "3.17200352149 2.09977892775 2.09977892775 1.85347285768 1.58522499275 1.793421274 2.0226574939 1e-06 0.0 0.723907192458\n"
        "3.305087875 2.18371870521 2.18371870521 1.73694104759 1.47502046025 1.68363113002 1.88498486777 0.723907192458 0.723907192458 0.0\n"
        "\n"
        "10 10 2\n"
        "0.0 1.7933317506 1.93555078987 2.71333905342 2.41690950703 2.79721703021 2.61190947677 3.0656556534 3.0656556534 2.8892243649\n"
        "1.7933317506 0.0 1.68766739724 2.28883124536 2.27186650883 2.71333905342 2.19130979901 2.45691541811 2.45691541811 2.27186650883\n"
        "1.93555078987 1.68766739724 0.0 2.13144747957 1.93555078987 2.32369754387 2.19130979901 2.19130979901 2.17598688617 2.17598688617\n"
        "2.71333905342 2.28883124536 2.13144747957 0.0 1.3797795829 1.63463037017 1.69680208301 1.7832252723 1.7832252723 1.61758955451\n"
        "2.41690950703 2.27186650883 1.93555078987 1.3797795829 0.0 1.08776580533 1.0314530259 1.72474527395 1.72474527395 1.71533925652\n"
        "2.79721703021 2.71333905342 2.32369754387 1.63463037017 1.08776580533 0.0 1.00008225101 1.85633826138 1.85633826138 1.9474259445\n"
        "2.61190947677 2.19130979901 2.19130979901 1.69680208301 1.0314530259 1.00008225101 0.0 1.88948115743 1.87830455793 1.95945142153\n"
        "3.0656556534 2.45691541811 2.19130979901 1.7832252723 1.72474527395 1.85633826138 1.88948115743 0.0 0.00462663252124 0.647020869359\n"
        "3.0656556534 2.45691541811 2.17598688617 1.7832252723 1.72474527395 1.85633826138 1.87830455793 0.00462663252124 0.0 0.643985723008\n"
        "2.8892243649 2.27186650883 2.17598688617 1.61758955451 1.71533925652 1.9474259445 1.95945142153 0.647020869359 0.643985723008 0.0\n"
        "\n"
        "10 10 3\n"
        "0.0 1.68313278243 1.74143328148 3.38530427819 2.41202517751 2.19517945812 1.94146981214 2.29742858911 2.29742858911 2.29742858911\n"
        "1.68313278243 0.0 1.94146981214 2.29742858911 2.41202517751 2.41202517751 2.69347770284 2.54236624294 2.54236624294 2.69347770284\n"
        "1.74143328148 1.94146981214 0.0 2.10287389709 1.68313278243 2.19517945812 1.87000756196 2.01874816962 2.01874816962 1.5270448837\n"
        "3.38530427819 2.29742858911 2.10287389709 0.0 1.68313278243 2.10287389709 2.69347770284 1.39302021535 1.39302021535 1.87000756196\n"
        "2.41202517751 2.41202517751 1.68313278243 1.68313278243 0.0 1.07694974922 1.10730376904 1.35224142287 1.35224142287 1.57627869817\n"
        "2.19517945812 2.41202517751 2.19517945812 2.10287389709 1.07694974922 0.0 1.0475356349 1.5270448837 1.5270448837 1.80354690278\n"
        "1.94146981214 2.69347770284 1.87000756196 2.69347770284 1.10730376904 1.0475356349 0.0 1.48023738714 1.48023738714 1.74143328148\n"
        "2.29742858911 2.54236624294 2.01874816962 1.39302021535 1.35224142287 1.5270448837 1.48023738714 0.0 1e-06 0.493007962357\n"
        "2.29742858911 2.54236624294 2.01874816962 1.39302021535 1.35224142287 1.5270448837 1.48023738714 1e-06 0.0 0.493007962357\n"
        "2.29742858911 2.69347770284 1.5270448837 1.87000756196 1.57627869817 1.80354690278 1.74143328148 0.493007962357 0.493007962357 0.0\n"
        "\n"
        "10 10 4\n"
        "0.0 1.83472352392 2.08208792067 2.5328775504 2.31453009185 2.52068226097 2.32433410043 2.6785027883 2.69291884642 2.73752798036\n"
        "1.83472352392 0.0 1.73958818282 2.49675152459 2.31453009185 2.42837669994 2.42837669994 2.4850084826 2.4850084826 2.59631900754\n"
        "2.08208792067 1.73958818282 0.0 2.08208792067 1.99460283382 2.17003967023 2.12105975105 2.17003967023 2.17845425138 2.22168281899\n"
        "2.5328775504 2.49675152459 2.08208792067 0.0 1.56940507004 1.75569936602 1.9081190829 1.7185230182 1.72899721471 1.78876534885\n"
        "2.31453009185 2.31453009185 1.99460283382 1.56940507004 0.0 0.927531129418 1.12301292212 1.74492827558 1.72899721471 1.67276778689\n"
        "2.52068226097 2.42837669994 2.17003967023 1.75569936602 0.927531129418 0.0 0.932072247051 1.75569936602 1.75569936602 1.72374568116\n"
        "2.32433410043 2.42837669994 2.12105975105 1.9081190829 1.12301292212 0.932072247051 0.0 1.8114665485 1.8114665485 1.78876534885\n"
        "2.6785027883 2.4850084826 2.17003967023 1.7185230182 1.74492827558 1.75569936602 1.8114665485 0.0 0.00771038590874 0.6271028134\n"
        "2.69291884642 2.4850084826 2.17845425138 1.72899721471 1.72899721471 1.75569936602 1.8114665485 0.00771038590874 0.0 0.623806488095\n"
        "2.73752798036 2.59631900754 2.22168281899 1.78876534885 1.67276778689 1.72374568116 1.78876534885 0.6271028134 0.623806488095 0.0\n"
        "\n"
        "10 10 5\n"
        "0.0 2.66399915596 2.0371036951 3.10872856028 2.86057383598 2.66399915596 2.24109242691 2.86057383598 2.86057383598 2.50120881657\n"
        "2.66399915596 0.0 1.9494840321 1.86926762891 2.13363336269 2.13363336269 2.66399915596 2.13363336269 2.13363336269 2.36227559126\n"
        "2.0371036951 1.9494840321 0.0 1.86926762891 1.9494840321 2.0371036951 1.86926762891 2.50120881657 2.50120881657 2.0371036951\n"
        "3.10872856028 1.86926762891 1.86926762891 0.0 1.72667844373 2.0371036951 1.86926762891 2.13363336269 2.0371036951 1.6626811885\n"
        "2.86057383598 2.13363336269 1.9494840321 1.72667844373 0.0 0.792824087405 0.897468971092 1.86926762891 1.86926762891 1.86926762891\n"
        "2.66399915596 2.13363336269 2.0371036951 2.0371036951 0.792824087405 0.0 0.843706395047 1.49309279305 1.49309279305 1.49309279305\n"
        "2.24109242691 2.66399915596 1.86926762891 1.86926762891 0.897468971092 0.843706395047 0.0 2.24109242691 2.24109242691 1.72667844373\n"
        "2.86057383598 2.13363336269 2.50120881657 2.13363336269 1.86926762891 1.49309279305 2.24109242691 0.0 0.0217525244644 0.534192200621\n"
        "2.86057383598 2.13363336269 2.50120881657 2.0371036951 1.86926762891 1.49309279305 2.24109242691 0.0217525244644 0.0 0.497186548377\n"
        "2.50120881657 2.36227559126 2.0371036951 1.6626811885 1.86926762891 1.49309279305 1.72667844373 0.534192200621 0.497186548377 0.0");

string gm("5 10\n"
        "8 9 1 2 3 4 5 6 7 10\n"
        "8 9 1 2 3 4 5 6 7 10\n"
        "8 9 1 2 3 4 5 6 7 10\n"
        "8 9 1 2 3 4 5 6 7 10\n"
        "8 9 1 2 3 4 5 6 7 10");

string lab("10\n"
        "Sp8 Sp9 Sp1 Sp2 Sp3 Sp4 Sp5 Sp6 Sp7 Sp10");

string tree("((Sp4,(Sp5,(Sp6,Sp7))),(((Sp1,Sp2),Sp3),(Sp10,(Sp8,Sp9))));");

std::pair<std::string, double> testcompute(std::string matrices, std::string mapping, std::string labels, std::string tree, int iter, bool keep_topology, bool quiet) throw()
{
    std::vector<MinSquareTreeCollection::DblMatrix> pmatrices;
    MinSquareTreeCollection::IntMatrix pmapping;
    std::vector<std::string> plabels;
    shared_ptr<PhyTree> ptree = nullptr;
    shared_ptr<MinSquareTreeCollection> mstc = nullptr;
    cout << "in c++ compute fn" << endl;
    try {
        pmatrices = ProblemParser::parse_matrices(matrices);
        pmapping = ProblemParser::parse_mapping(mapping);
        plabels = ProblemParser::parse_labels(labels);
        cout << "parsed 3 data files" << endl;
        ptree = ProblemParser::parse_tree(tree);
        cout << "parsed data" << endl;
        mstc = make_shared<MinSquareTreeCollection>(pmatrices, pmapping, plabels, *ptree);



        ptree = NULL;
        cout << "launching mstc->compute" << endl;
        mstc->compute(keep_topology, iter, quiet);
        cout << "done" << endl;
    }

    catch(std::exception &e) {
        cout << "there was an error" << endl;
        cerr << e.what() << endl;
    }

    std::string out_tree(mstc->getTree());
    double out_score(mstc->getScore());
    std::pair<std::string, double> result = std::make_pair(out_tree, out_score);
    cout << "..done" << endl;
    return result;
}



int main(int argc, char const *argv[])
{
    auto result = testcompute(dv, gm, lab, tree, 1, false, false);
    return 0;
}
