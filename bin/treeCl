#!/usr/bin/env python

# standard library
import os
import subprocess as sb

# treeCl
from treeCl import Collection, Clustering, Scorer
from treeCl.utils import fileIO
from treeCl.errors import directorycheck, directorymake, filecheck

def load_cache(cache_dir):
    collection = fileIO.gunpickle(filecheck('{0}/collection.pkl.gz'.format(cache_dir)))
    return collection

def write_memberships(outfile, partition, scorer):
    inds = partition.get_membership()
    with open(outfile, 'w') as file_:
        for cluster, ix in enumerate(inds, start=1):
            names = [scorer.records[i].name for i in ix]
            names_string = ' '.join(names)
            file_.write('{0}\t{1}\n'.format(cluster, names_string))

def write_trees(outfile, partition, scorer):
    inds = partition.get_membership()
    with open(outfile, 'w') as file_:
        for ix in inds:
            tree = scorer.concats[ix]
            file_.write(tree.newick + '\n')

def write_tree_details(outfile, partition, scorer):
    inds = partition.get_membership()
    with open(outfile, 'w') as file_:
        for ix in inds:
            tree = scorer.concats[ix]
            file_.write(tree.output +'\n')

def write_summary(outfile, metric, method, likelihood, partition):
    with open(outfile, 'w') as file_:
        file_.write('metric = {0}\n'.format(metric))
        file_.write('method = {0}\n'.format(method))
        file_.write('likelihood = {0}\n'.format(likelihood))
        file_.write('partition = {0}\n'.format(partition))

def cluster(clustering, method, nclasses, noise=False):

    if method == 'spectral':
        decomp = clustering.spectral_decomp(prune = -1)
        return clustering.spectral_cluster(nclasses, decomp)

    elif method == 'mds':
        decomp = clustering.MDS_decomp()
        return clustering.MDS_cluster(nclasses, decomp)

    elif (method == 'single' or
          method == 'complete' or
          method == 'average' or
          method == 'ward'):
        return clustering.hierarchical(nclasses, method, noise)

    elif method == 'kmedoids':
        return clustering.kmedoids(nclasses, noise)

def parse_args():
    import argparse
    fchoices = ['fasta', 'phylip']
    dchoices = ['protein', 'dna']
    cchoices = ['spectral', 'mds', 'single', 'complete', 'average', 'ward',
                'kmedoids']
    mchoices = ['geo', 'euc', 'rf', 'wrf']
    zchoices = ['gz', 'bz2', None]
    lchoices = ['ml', 'nj', 'lr', 'l', 'r']
    vchoices = [0, 1, 2, 3]

    help_messages = {
        'b': 'Use LSF bsub if available',
        'c': 'Clustering method',
        'd': 'Datatype',
        'e': 'Enumerate classes (go from 1 to N classes)',
        'f': 'File format',
        'i': 'Input directory',
        'k': 'Dump cache to directory NOT YET IMPLEMENTED',
        'l': ('Tree search strategy: ml=full maximum likelihood, '
                'nj=BioNJ, lr=BioNJ topology, optimised lengths and rates'),
        'm': 'Distance metric',
        'n': 'Number of classes',
        'o': 'Output directory',
        'p': 'Precomputed cache directory NOT YET IMPLEMENTED',
        'r': 'Do permutation to find number of clusters [Randomisation]',
        's': 'Do parametric bootstraps to find number of clusters [Simulation]',
        't': 'Temporary directory',
        'v': 'Verbosity level: 0-3',
        'z': 'Compression (if input files are compressed)',
    }

    parser = argparse.ArgumentParser(description=fileIO.basename(__file__))
    parser.add_argument('-b', action='store_true', help=help_messages['b'])
    parser.add_argument('-c', type=str, choices=cchoices,
                        help=help_messages['c'], required=True)
    parser.add_argument('-d', type=str, choices=dchoices,
                        help=help_messages['d'], required=True)
    parser.add_argument('-e', action='store_true', help=help_messages['e'])
    parser.add_argument('-f', type=str, choices=fchoices,
                        help=help_messages['f'], required=True)
    parser.add_argument('-i', type=str,
                        help=help_messages['i'], required=True)
    parser.add_argument('-k', type=str, help=help_messages['k'])
    parser.add_argument('-l', type=str, choices=lchoices,
                        help=help_messages['l'], required=True)
    parser.add_argument('-m', type=str, choices=mchoices,
                        help=help_messages['m'], required=True)
    parser.add_argument('-n', type=int, help=help_messages['n'], required=True)
    parser.add_argument('-o', type=str,
                        help=help_messages['o'], required=True)
    parser.add_argument('-p', type=str, help=help_messages['p'])
    parser.add_argument('-r', type=int, help=help_messages['r'], default=0)
    parser.add_argument('-s', type=int, help=help_messages['s'], default=0)
    parser.add_argument('-t', type=str,
                        help=help_messages['t'], required=True)
    parser.add_argument('-v', type=int, choices=vchoices,
                        help=help_messages['v'], default=1)
    parser.add_argument('-z', type=str, choices=zchoices,
                        help=help_messages['z'], default=None)
    return parser.parse_args()

def validate_args(args):
    directorycheck(args.i)
    directorymake(args.o)
    if args.p:
        directorycheck(args.p)
    if args.k:
        directorymake(args.k)
    if args.b:
        args.b = sb.call('type bsub',
                         stderr=sb.PIPE,
                         stdout=sb.PIPE,
                         shell=True)==0

if __name__ == "__main__":
    args = parse_args()
    validate_args(args)
    tmpdir = os.getenv('TEMPORARY_DIRECTORY') or args.t
    directorymake(tmpdir)

    if not args.p:
        collection = Collection(input_dir=args.i, datatype=args.d,
                                file_format=args.f, compression=args.z,
                                tmpdir=tmpdir)

        collection.calc_phyml_trees(analysis=args.l, lsf=args.b,
                                    verbosity=args.v)

        if args.k:
            fileIO.gpickle(collection,
                '{0}/collection.pkl.gz'.format(args.k))

    else:
        collection = load_cache(args.p)

    distance_matrix = collection.distance_matrix(args.m, lsf=args.b)
    clustering = Clustering(distance_matrix)
    if args.e:
        partitions = [cluster(clustering, args.c, n,
                              (True if args.m == 'rf' else False))
                      for n in range(1, args.n+1)]
    else:
        partitions = [cluster(clustering, args.c, args.n,
                              (True if args.m == 'rf' else False))]
    scorer = Scorer(collection.records, args.l, lsf=args.b, verbosity=args.v)
    scorer.add_partition_list(partitions)
    for partition in partitions:
        score = scorer.score(partition)
        for i in range(1, args.s + 1):
            n = len(partition)
            sim_recs = scorer.simulate_from_result(partition)
            d = directorymake('{0}/parametric_bootstraps/{1}_clusters/{2}'
                              .format(args.o, n, i))
            for rec in sim_recs:
                rec.write_phylip('{0}/{1}_{2:0>{3}}.phy.gz'.format(d, rec.name,
                    i, len(str(args.s))))
        for j in range(1, args.r + 1):
            perm = collection.permuted_copy()
            d = directorymake('{0}/nonparametric_bootstraps/{1}'.format(
                          args.o, j))
            for rec in perm.records:
                rec.write_phylip('{0}/{1}_{2:0>{3}}.phy.gz'.format(d, rec.name,
                    j, len(str(args.s))))

    outfiles = {'memberships': '{0}/memberships.txt'.format(args.o),
                'trees': '{0}/trees.nwk'.format(args.o),
                'tree_details': '{0}/trees_details.txt'.format(args.o),
                'summary': '{0}/summary.txt'.format(args.o)}

    write_memberships(outfiles['memberships'], partition, scorer)
    write_trees(outfiles['trees'], partition, scorer)
    write_tree_details(outfiles['tree_details'], partition, scorer)
    write_summary(outfiles['summary'], args.m, args.c, score, partition)
