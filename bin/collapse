#!/usr/bin/env python
from __future__ import print_function
import os
import sys

import dendropy as dpy


def collapse(tree, threshold, keep_length=True):
    t = dpy.Tree().clone_from(tree)
    f = lambda x: (True if (x.is_internal() and x.label) else False)
    to_collapse = []
    for node in t.postorder_node_iter(filter_fn=f):
        try:
            support = float(node.label)
            if support < threshold:
                to_collapse.append(node.edge)
        except:
            continue
    for edge in to_collapse:
        if keep_length:
            for child in edge.head_node.child_nodes():
                child.edge.length += edge.length
        edge.collapse()
    return t


def _get_support_treelist(treelist, threshold):
    """ Takes a treelist with support values and edge lengths
    and returns a treelist where support values ARE edge lengths,
    and the majority-rule consensus """
    support_treelist = dpy.TreeList(taxon_set=treelist.taxon_set)
    for tree in treelist:
        copied_tree = dpy.Tree().clone_from(tree)
        for node in copied_tree.postorder_node_iter():
            if node.label:
                try:
                    support = float(node.label)
                    node.edge.length = support
                except ValueError:
                    node.edge.length = 0.0
            elif node.is_leaf():
                node.edge.length = 1.0
            elif node is copied_tree.seed_node:
                node.edge.length = 1.0
            else:
                node.edge.length = 0.0
        support_treelist.append(copied_tree)
    _ = support_treelist.consensus(min_freq=threshold)
    return support_treelist


def support_decorated_consensus(treelist, threshold):
    support_treelist = _get_support_treelist(treelist, threshold)
    consensus = treelist.consensus(min_freq=threshold)
    for node in consensus.postorder_node_iter():
        if node is consensus.seed_node:
            continue
        split = node.edge.split_bitmask
        if not split in treelist.split_distribution.splits:
            split = treelist.taxon_set.complement_split_bitmask(split)
        length = treelist.split_distribution.split_edge_length_summaries[split]['mean']
        support = support_treelist.split_distribution.split_edge_length_summaries[split]['mean']
        node.edge.length = length
        node.label = str(support)
    return consensus


def parse_args():
    """ Parses command line arguments """
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('trees_file', type=str)
    parser.add_argument('--threshold', type=float)
    parser.add_argument('--format', type=str, default='newick',
                        choices=['nexus', 'newick'])
    parser.add_argument('--test', action='store_true')
    parser.add_argument('--lengths', action='store_true')
    parser.add_argument('--outfile', type=str)
    return parser.parse_args()


def read_tree_file(args):
    filename = args.tree
    if not os.path.exists(filename):
        raise Exception('File not found: {}'.format(filename))
    try:
        t = dpy.TreeList.get_from_path(filename, args.format)
    except dpy.utility.error.DataParseError:
        file_format = ({'nexus', 'newick'} - {args.format}).pop()
        t = dpy.Tree.get_from_path(filename, file_format)
    return t


def test():
    n = ('((A:1,(B:0.5,C:0.5)80:0.5)30:1,'
         '(D:1.2,(E:0.7,F:0.7)20:0.5)60:0.8)100:0;')
    t = dpy.Tree.get_from_string(n, 'newick')
    t.print_plot(plot_metric='length')
    fh = sys.stdout
    zero = collapse(t, 25)
    zero.print_plot(plot_metric='length')
    zero.write(fh, 'newick', suppress_rooting=True)
    one = collapse(t, 50)
    one.print_plot(plot_metric='length')
    one.write(fh, 'newick', suppress_rooting=True)
    two = collapse(t, 65)
    two.print_plot(plot_metric='length')
    two.write(fh, 'newick', suppress_rooting=True)
    three = collapse(t, 65, False)
    three.print_plot(plot_metric='length')
    three.write(fh, 'newick', suppress_rooting=True)


def get_file_handle(args):
    if args.outfile == 'stdout' or args.outfile is None:
        return sys.stdout
    else:
        return open(args.outfile, 'w')


def main():
    args = parse_args()
    if args.test:
        return test()
    trees = read_tree_file(args)
    tree = support_decorated_consensus(trees, args.threshold)
    collapsed_tree = collapse(tree, args.threshold, args.lengths)
    with get_file_handle(args) as handle:
        collapsed_tree.write(handle, 'newick', suppress_rooting=True)


if __name__ == '__main__':
    sys.exit(main())
